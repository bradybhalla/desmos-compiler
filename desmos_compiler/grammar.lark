start: statement+

?statement: declaration | assignment | if_ | while_ | function_def | function_return | function_call_statement

declaration: TYPE VAR ";"
assignment: VAR "=" expr ";"

?if_: if_only | if_else
if_only: "if" "(" expr ")" "{" statement* "}"
if_else: if_only (elif | else_)
?elif: "else" if_
else_: "else" "{" statement* "}"

while_: "while" "(" expr ")" "{" statement* "}"

function_def: TYPE VAR "(" param_list ")" "{" statement* "}"
param_list: ((func_param ",")* func_param)?
func_param: TYPE VAR

function_call: VAR "(" arg_list ")"
arg_list: ((expr ",")* expr)?

function_return: "return" expr ";"

function_call_statement: function_call ";"

?expr: expr0
?expr0: expr1
      | expr0 (EQ | NE | LT | GT | LE | GE) expr1 -> binary_expr

?expr1: expr2
      | expr1 (ADD | SUB) expr2 -> binary_expr

?expr2: expr3
      | expr2 (MULT | DIV | MOD) expr3 -> binary_expr

?expr3: NUM | VAR
      | "(" expr0 ")" -> parens_expr
      | function_call


VAR: CNAME
NUM: SIGNED_NUMBER

TYPE: "num"

MULT: "*"
DIV: "/"
MOD: "%"

ADD: "+"
SUB: "-"

EQ: "=="
NE: "!="
LT: "<"
GT: ">"
LE: "<="
GE: ">="

%import common.SIGNED_NUMBER
%import common.CNAME
%import common.WS

%ignore WS
