start: statement+

?statement: assignment | if_ | while_ | function_def | return

?assignment: declare | assign | declare_assign
declare: TYPE lval ";"
assign: lval "=" expr ";"
declare_assign: TYPE lval "=" expr ";"
lval: VAR

?if_: if_only | if_else
if_only: "if" "(" expr ")" "{" statement* "}"
if_else: if_only (elif | else_)
?elif: "else" if_
else_: "else" "{" statement* "}"

while_: "while" "(" expr ")" "{" statement* "}"


function_def: TYPE FUNC_NAME "(" param_list ")" "{" statement* "}"
param_list: ((func_param ",")* func_param)?
func_param: TYPE lval

function_call: FUNC_NAME "(" arg_list ")"
arg_list: ((expr ",")* expr)?

return: "return" expr? ";"

?expr: expr0
?expr0: expr1
      | expr0 (EQ | NE | LT | GT | LE | GE) expr1 -> expr

?expr1: expr2
      | expr1 (ADD | SUB) expr2 -> expr

?expr2: expr3
      | expr2 (MULT | DIV | MOD) expr3 -> expr

?expr3: NUM | VAR
      | "(" expr0 ")" -> parens_expr
      | function_call


VAR: "$" CNAME
FUNC_NAME: CNAME
NUM: SIGNED_NUMBER

TYPE: "num"

MULT: "*"
DIV: "/"
MOD: "%"

ADD: "+"
SUB: "-"

EQ: "=="
NE: "!="
LT: "<"
GT: ">"
LE: "<="
GE: ">="

%import common.SIGNED_NUMBER
%import common.CNAME
%import common.WS

%ignore WS
